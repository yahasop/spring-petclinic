pipeline {
    agent {
        label 'agent2'
    }
    
    stages {
        
        stage('CreateGHRelease') {
            steps {
                createGitHubRelease commitish: 'main', credentialId: 'github-token', draft: false, prerelease: false, repository: 'yahasop/spring-petclinic', tag: "1.0.${env.BUILD_NUMBER}"
            }
        }
        
        stage('ListGHReleases') {
            steps {
                //This uses the Github Release
                script {
                    def releases = listGitHubReleases(
                        credentialId: 'github-token', 
                        includeDrafts: false, 
                        repository: 'yahasop/jenkins-example-docker', 
                        sortAscending: false, 
                        tagNamePattern: '1.'
                    )
                    echo "Releases: ${releases[0]?.tagName}"
                }
            }
        }

        stage('GetInstancesIP') {
            steps {
                sh 'sudo cp /home/ubuntu/app/workspace/provision-infrastructure/instances-ip.txt ./instances-ip.txt'
            }
        }

        stage('Running Ansible (Preparation)') {
            when {
                expression { params.tfstep == 'Ansible' }
            }

            steps {
                sh 'chmod u+x create-inv.sh' //Makes the script executable
                sh 'sudo ./create-inv.sh' //Executes the script with sudo permissions
                //sh 'sshpass -p ubuntu ansible-playbook -i ./ansible/hosts ./ansible/add-sudoers.yml -u ubuntu -k'
            }
        }
        /*
        stage('Pulling and Deploy Image') {
            when {
                expression { params.buildstep == 'Docker' }
            }
            steps {
                sh 'chmod u+x docker-pulling-image.sh'
                sh './docker-pulling-image.sh'
            }
        }
        */
    }
}